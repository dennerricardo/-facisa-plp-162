/* Generated By:JavaCC: Do not edit this line. AnalisadorConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AnalisadorConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int TIPOS = 5;
  /** RegularExpression Id. */
  int NUMEROS = 6;
  /** RegularExpression Id. */
  int IDENTIFICADOR = 7;
  /** RegularExpression Id. */
  int STRING = 8;
  /** RegularExpression Id. */
  int PALAVRAS_RESERVADAS = 9;
  /** RegularExpression Id. */
  int IGUALDADE = 10;
  /** RegularExpression Id. */
  int MENORQUE = 11;
  /** RegularExpression Id. */
  int MAIORQUE = 12;
  /** RegularExpression Id. */
  int MENORIGUAL = 13;
  /** RegularExpression Id. */
  int MAIORIGUAL = 14;
  /** RegularExpression Id. */
  int DIVISAO = 15;
  /** RegularExpression Id. */
  int SOMA = 16;
  /** RegularExpression Id. */
  int SUBTRACAO = 17;
  /** RegularExpression Id. */
  int MULTIPLICACAO = 18;
  /** RegularExpression Id. */
  int DIVISAO_INTEIRA = 19;
  /** RegularExpression Id. */
  int RESTO = 20;
  /** RegularExpression Id. */
  int DPONTOIGUAL = 21;
  /** RegularExpression Id. */
  int MAISIGUAL = 22;
  /** RegularExpression Id. */
  int MENOSIGUAL = 23;
  /** RegularExpression Id. */
  int MULTIIGUAL = 24;
  /** RegularExpression Id. */
  int PARENTMULTI = 25;
  /** RegularExpression Id. */
  int MULTIPARENT = 26;
  /** RegularExpression Id. */
  int PARENTPONTO = 27;
  /** RegularExpression Id. */
  int PONTOPARENT = 28;
  /** RegularExpression Id. */
  int BARRABARRA = 29;
  /** RegularExpression Id. */
  int MAIN = 30;
  /** RegularExpression Id. */
  int PROGRAMA = 31;
  /** RegularExpression Id. */
  int IF = 32;
  /** RegularExpression Id. */
  int THEN = 33;
  /** RegularExpression Id. */
  int ELSE = 34;
  /** RegularExpression Id. */
  int WHILE = 35;
  /** RegularExpression Id. */
  int DO = 36;
  /** RegularExpression Id. */
  int FOR = 37;
  /** RegularExpression Id. */
  int REPEAT = 38;
  /** RegularExpression Id. */
  int UNTIL = 39;
  /** RegularExpression Id. */
  int GOTO = 40;
  /** RegularExpression Id. */
  int AND = 41;
  /** RegularExpression Id. */
  int BEGIN = 42;
  /** RegularExpression Id. */
  int BREAK = 43;
  /** RegularExpression Id. */
  int CONTINUE = 44;
  /** RegularExpression Id. */
  int DOWNTO = 45;
  /** RegularExpression Id. */
  int END = 46;
  /** RegularExpression Id. */
  int ENDPONTO = 47;
  /** RegularExpression Id. */
  int NOT = 48;
  /** RegularExpression Id. */
  int OR = 49;
  /** RegularExpression Id. */
  int TRUE = 50;
  /** RegularExpression Id. */
  int FALSE = 51;
  /** RegularExpression Id. */
  int EPAREN = 52;
  /** RegularExpression Id. */
  int DPAREN = 53;
  /** RegularExpression Id. */
  int ECHAVE = 54;
  /** RegularExpression Id. */
  int DCHAVE = 55;
  /** RegularExpression Id. */
  int EBRACKETS = 56;
  /** RegularExpression Id. */
  int DBRACKETS = 57;
  /** RegularExpression Id. */
  int PONTO = 58;
  /** RegularExpression Id. */
  int DPONTOS = 59;
  /** RegularExpression Id. */
  int AROBA = 60;
  /** RegularExpression Id. */
  int CIFRAO = 61;
  /** RegularExpression Id. */
  int HASHTAG = 62;
  /** RegularExpression Id. */
  int ACENTO = 63;
  /** RegularExpression Id. */
  int VIRGULA = 64;
  /** RegularExpression Id. */
  int ASPASNORMAL = 65;
  /** RegularExpression Id. */
  int ASPAS = 66;
  /** RegularExpression Id. */
  int PONTOEVIRGULA = 67;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "<TIPOS>",
    "<NUMEROS>",
    "<IDENTIFICADOR>",
    "<STRING>",
    "<PALAVRAS_RESERVADAS>",
    "\"= \"",
    "\"<\"",
    "\">\"",
    "\"<= \"",
    "\">= \"",
    "\"/ \"",
    "\"+ \"",
    "\"- \"",
    "\"* \"",
    "\"div \"",
    "\"mod \"",
    "\":= \"",
    "\"+= \"",
    "\"-= \"",
    "\"*= \"",
    "\"(* \"",
    "\"*) \"",
    "\"(. \"",
    "\".) \"",
    "\"// \"",
    "\"public static void Main() \"",
    "\"Programa \"",
    "\"if \"",
    "\"then \"",
    "\"else \"",
    "\"while \"",
    "\"do \"",
    "\"for \"",
    "\"repeat \"",
    "\"until \"",
    "\"goto \"",
    "\"and \"",
    "\"begin \"",
    "\"break \"",
    "\"continue \"",
    "\"downto \"",
    "\"end \"",
    "\"end. \"",
    "\"not \"",
    "\"or \"",
    "\"true \"",
    "\"false \"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\".\"",
    "\":\"",
    "\"@\"",
    "\"$\"",
    "\"#\"",
    "\"^\"",
    "\",\"",
    "\"\\\"\"",
    "\"\\\'\"",
    "\";\"",
  };

}
