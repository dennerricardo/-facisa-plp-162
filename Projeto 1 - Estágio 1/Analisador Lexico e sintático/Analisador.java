/* Generated By:JavaCC: Do not edit this line. Analisador.java */
public class Analisador implements AnalisadorConstants {

    public void processa() throws Exception {
        while (true) {
            Token t = getNextToken();
            String nomeToken = tokenImage[t.kind];
            System.out.println(nomeToken);
            if (t.kind == PONTOEVIRGULA)
                break;
        }
    }

   public static void main(String[] args) {
            System.out.print("Input:");
            Analisador analisador = new Analisador(System.in);
            try {
                analisador.processa();
            } catch (Exception e) {
                  System.out.println(e.getMessage());
                  e.printStackTrace();
            }
      }

/* LEXICO */

/* SINTÃ?TICO */
  final public void Programa() throws ParseException {
    jj_consume_token(PROGRAMA);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(EPAREN);
    jj_consume_token(DPAREN);
    jj_consume_token(0);
  }

  final public void block() throws ParseException {
    variableDeclarationPart();
    statementPart();
  }

  final public void variableDeclarationPart() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
      jj_consume_token(0);
      break;
    case PALAVRAS_RESERVADAS:
      jj_consume_token(PALAVRAS_RESERVADAS);
      variableDeclaration();
      jj_consume_token(PONTOEVIRGULA);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        variableDeclaration();
        jj_consume_token(PONTOEVIRGULA);
      }
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void variableDeclaration() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(VIRGULA);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(DPONTOS);
    type();
  }

  final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIPOS:
      jj_consume_token(TIPOS);
      break;
      arrayType();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void arrayType() throws ParseException {
    jj_consume_token(TIPOS);
    jj_consume_token(EBRACKETS);
    indexRange();
    jj_consume_token(DBRACKETS);
    jj_consume_token(PALAVRAS_RESERVADAS);
    jj_consume_token(TIPOS);
  }

  final public void indexRange() throws ParseException {
    jj_consume_token(NUMEROS);
    jj_consume_token(PONTO);
    jj_consume_token(PONTO);
    jj_consume_token(NUMEROS);
  }

  final public void simpleType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIPOS:
      jj_consume_token(TIPOS);
      break;
      jj_consume_token(TIPOS);
      break;
      jj_consume_token(TIPOS);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void typeIndetifier() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
  }

  final public void statementPart() throws ParseException {
    compoundStatement();
  }

  final public void compoundStatement() throws ParseException {
    jj_consume_token(BEGIN);
    statement();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PONTOEVIRGULA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(PONTOEVIRGULA);
      statement();
    }
    jj_consume_token(END);
  }

  final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
    case PALAVRAS_RESERVADAS:
      simpleStatement();
      break;
    case IF:
    case WHILE:
    case BEGIN:
      structuredStatement();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void simpleStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      assigmentStatement();
      break;
    case PALAVRAS_RESERVADAS:
      readStatement();
      break;
      writeStatement();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void assigmentStatement() throws ParseException {
    variable();
    jj_consume_token(DPONTOIGUAL);
    expression();
  }

  final public void readStatement() throws ParseException {
    jj_consume_token(PALAVRAS_RESERVADAS);
    jj_consume_token(EPAREN);
    variable();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(VIRGULA);
      variable();
    }
    jj_consume_token(DPAREN);
  }

  final public void writeStatement() throws ParseException {
    jj_consume_token(PALAVRAS_RESERVADAS);
    jj_consume_token(EPAREN);
    variable();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      jj_consume_token(VIRGULA);
      variable();
    }
    jj_consume_token(DPAREN);
  }

  final public void structuredStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEGIN:
      compoundStatement();
      break;
    case IF:
      ifStatement();
      break;
    case WHILE:
      whileStatement();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ifStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      expression();
      jj_consume_token(THEN);
      statement();
      break;
      jj_consume_token(IF);
      expression();
      jj_consume_token(THEN);
      statement();
      jj_consume_token(ELSE);
      statement();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void whileStatement() throws ParseException {
    jj_consume_token(WHILE);
    expression();
    jj_consume_token(DO);
    statement();
  }

  final public void expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
    case SOMA:
    case SUBTRACAO:
      simpleExpression();
      break;
      simpleExpression();
      relationalOperator();
      simpleExpression();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void simpleExpression() throws ParseException {
    sign();
    term();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
      case SUBTRACAO:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
      addingOperator();
      term();
    }
  }

  final public void term() throws ParseException {
    factor();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICACAO:
      case DIVISAO_INTEIRA:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      multiplyingOperator();
      factor();
    }
  }

  final public void factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      variable();
      break;
    case NUMEROS:
    case STRING:
    case ASPASNORMAL:
    case ASPAS:
      constant();
      break;
    case EPAREN:
      jj_consume_token(EPAREN);
      expression();
      jj_consume_token(DPAREN);
      break;
    case NOT:
      jj_consume_token(NOT);
      factor();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void relationalOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUALDADE:
      jj_consume_token(IGUALDADE);
      break;
    case MENORQUE:
      jj_consume_token(MENORQUE);
      break;
    case MENORIGUAL:
      jj_consume_token(MENORIGUAL);
      break;
    case MAIORIGUAL:
      jj_consume_token(MAIORIGUAL);
      break;
    case MAIORQUE:
      jj_consume_token(MAIORQUE);
      break;
    case OR:
      jj_consume_token(OR);
      break;
    case AND:
      jj_consume_token(AND);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void sign() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOMA:
      jj_consume_token(SOMA);
      break;
    case SUBTRACAO:
      jj_consume_token(SUBTRACAO);
      break;
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void addingOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOMA:
      jj_consume_token(SOMA);
      break;
    case SUBTRACAO:
      jj_consume_token(SUBTRACAO);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void multiplyingOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLICACAO:
      jj_consume_token(MULTIPLICACAO);
      break;
    case DIVISAO_INTEIRA:
      jj_consume_token(DIVISAO_INTEIRA);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void variable() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    indexedVariable();
  }

  final public void indexedVariable() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EBRACKETS:
      jj_consume_token(EBRACKETS);
      expression();
      jj_consume_token(DBRACKETS);
      break;
    default:
      jj_la1[19] = jj_gen;

    }
  }

  final public void arrayVariable() throws ParseException {
    entireVariable();
  }

  final public void entireVariable() throws ParseException {
    variableIdentifier();
  }

  final public void variableIdentifier() throws ParseException {
    identifier();
  }

  final public void constant() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMEROS:
      jj_consume_token(NUMEROS);
      break;
    case ASPASNORMAL:
    case ASPAS:
      characterConstant();
      break;
    case STRING:
      constantIdentifier();
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void constantIdentifier() throws ParseException {
    identifier();
  }

  final public void identifier() throws ParseException {
    letter();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMEROS:
      case STRING:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_7;
      }
      letterOrDigit();
    }
  }

  final public void letterOrDigit() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      letter();
      break;
    case NUMEROS:
      digit();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void integerConstant() throws ParseException {
    digit();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMEROS:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_8;
      }
      digit();
    }
  }

  final public void characterConstant() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASPAS:
      jj_consume_token(ASPAS);
      letterOrDigit();
      jj_consume_token(ASPAS);
      break;
    case ASPASNORMAL:
      jj_consume_token(ASPASNORMAL);
      letterOrDigit();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMEROS:
        case STRING:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_9;
        }
        letterOrDigit();
      }
      jj_consume_token(ASPASNORMAL);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void letter() throws ParseException {
    jj_consume_token(STRING);
  }

  final public void digit() throws ParseException {
    jj_consume_token(NUMEROS);
  }

  /** Generated Token Manager. */
  public AnalisadorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0x201,0x20,0x20,0x0,0x280,0x280,0x0,0x0,0x0,0x0,0x30001,0x30000,0xc0000,0x1c0,0x7c00,0x30001,0x30000,0xc0000,0x0,0x140,0x140,0x140,0x40,0x140,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x409,0x0,0x0,0x0,0x409,0x1,0x0,0x0,0x0,0x110000,0x20200,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x0,0x6,};
   }

  /** Constructor with InputStream. */
  public Analisador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Analisador(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalisadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Analisador(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalisadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Analisador(AnalisadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalisadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[68];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 68; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
