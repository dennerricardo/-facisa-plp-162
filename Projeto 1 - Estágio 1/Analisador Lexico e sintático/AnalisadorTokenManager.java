/* Generated By:JavaCC: Do not edit this line. AnalisadorTokenManager.java */

/** Token Manager. */
public class AnalisadorTokenManager implements AnalisadorConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4000200000000L) != 0L)
         {
            jjmatchedKind = 7;
            return 19;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 7;
            return 111;
         }
         if ((active0 & 0x10080100000L) != 0L)
         {
            jjmatchedKind = 7;
            return 280;
         }
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 7;
            return 49;
         }
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 7;
            return 35;
         }
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 7;
            return 17;
         }
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 7;
            return 83;
         }
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 7;
            return 233;
         }
         if ((active0 & 0x201000080000L) != 0L)
         {
            jjmatchedKind = 7;
            return 72;
         }
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 7;
            return 169;
         }
         if ((active0 & 0xc00400000000L) != 0L)
         {
            jjmatchedKind = 7;
            return 6;
         }
         if ((active0 & 0x8002000000000L) != 0L)
         {
            jjmatchedKind = 7;
            return 99;
         }
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 7;
            return 23;
         }
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 7;
            return 129;
         }
         if ((active0 & 0xc0000000000L) != 0L)
         {
            jjmatchedKind = 7;
            return 64;
         }
         return -1;
      case 1:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 1;
            return 232;
         }
         if ((active0 & 0x201000000000L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 1;
            return 71;
         }
         if ((active0 & 0xfcfafc0180000L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 1;
            return 280;
         }
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 1;
            return 131;
         }
         return -1;
      case 2:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 2;
            return 143;
         }
         if ((active0 & 0xdefeec0180000L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 2;
            return 280;
         }
         return -1;
      case 3:
         if ((active0 & 0xc3dcec0000000L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 3;
            return 280;
         }
         if ((active0 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x83cc8c0000000L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 4;
            return 280;
         }
         return -1;
      case 5:
         if ((active0 & 0x3040c0000000L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 5;
            return 280;
         }
         return -1;
      case 6:
         if ((active0 & 0x100080000000L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 6;
            return 280;
         }
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x100080000000L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 7;
            return 280;
         }
         return -1;
      case 8:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 22:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 23:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 24:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 3;
         return jjMoveStringLiteralDfa1_0(0x10L);
      case 34:
         return jjStopAtPos(0, 65);
      case 35:
         return jjStopAtPos(0, 62);
      case 36:
         return jjStopAtPos(0, 61);
      case 39:
         return jjStopAtPos(0, 66);
      case 40:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0xa000000L);
      case 41:
         return jjStopAtPos(0, 53);
      case 42:
         return jjMoveStringLiteralDfa1_0(0x5040000L);
      case 43:
         return jjMoveStringLiteralDfa1_0(0x410000L);
      case 44:
         return jjStopAtPos(0, 64);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x820000L);
      case 46:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x20008000L);
      case 58:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 59:
         return jjStopAtPos(0, 67);
      case 60:
         jjmatchedKind = 11;
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 62:
         jjmatchedKind = 12;
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 64:
         return jjStopAtPos(0, 60);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 91:
         return jjStopAtPos(0, 56);
      case 93:
         return jjStopAtPos(0, 57);
      case 94:
         return jjStopAtPos(0, 63);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0xc0000000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x201000080000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xc00400000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x8002000000000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x4000200000000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 123:
         return jjStopAtPos(0, 54);
      case 125:
         return jjStopAtPos(0, 55);
      default :
         return jjMoveNfa_0(7, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 32:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         break;
      case 41:
         return jjMoveStringLiteralDfa2_0(active0, 0x14000000L);
      case 42:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L);
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L);
      case 61:
         return jjMoveStringLiteralDfa2_0(active0, 0x1e06000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x44000000000L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0xa00000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0xc28000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1313000100000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x6080080000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(2, 13);
         else if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(2, 14);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         else if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(2, 22);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(2, 23);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 24);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(2, 25);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 26);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 27);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(2, 28);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 29);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 32);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(2, 36);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(2, 49);
         break;
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0xc20000100000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x80200000000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x1018000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(3, 19);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(3, 20);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(3, 37);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(3, 41);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(3, 46);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(3, 48);
         break;
      case 46:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x4004400000000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x48000000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x840000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x200200000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(4, 33);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(4, 34);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(4, 40);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(4, 47);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(4, 50);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000800000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x100040000000L);
      case 107:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(5, 35);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(5, 39);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(5, 42);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(5, 43);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(5, 51);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(6, 38);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(6, 45);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(8, 31);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(8, 44);
         break;
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 118:
         return jjMoveStringLiteralDfa15_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa18_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa19_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa20_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa21_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa22_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa23_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0, 0L);
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa24_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0, 0L);
}
private int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 41:
         return jjMoveStringLiteralDfa25_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0, 0L);
}
private int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(25, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(24, active0, 0L);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 280;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  break;
               case 143:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  break;
               case 169:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  break;
               case 233:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  break;
               case 129:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  break;
               case 232:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  break;
               case 280:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                     jjCheckNAdd(12);
                  }
                  break;
               case 131:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(12);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(15);
                  break;
               case 170:
                  if (curChar == 52 && kind > 5)
                     kind = 5;
                  break;
               case 171:
                  if (curChar == 54)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 19:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if (curChar == 111)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  break;
               case 71:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 143:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 156;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 151;
                  if (curChar == 115)
                     jjCheckNAdd(31);
                  break;
               case 169:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if (curChar == 110)
                     jjCheckNAdd(31);
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 184;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 207;
                  if (curChar == 110)
                     jjCheckNAdd(73);
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 202;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 195;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 191;
                  if (curChar == 110)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 172;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 233:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 251;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 249;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 240;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 236;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 99:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 107;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 105;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 100;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 129:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if (curChar == 111)
                     jjCheckNAdd(21);
                  else if (curChar == 104)
                     jjCheckNAdd(25);
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 141;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 128;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 161;
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 134;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 158;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 153;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 144;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 232:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if (curChar == 97)
                     jjCheckNAdd(45);
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 248;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 239;
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 235;
                  else if (curChar == 97)
                     jjCheckNAdd(136);
                  break;
               case 111:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 121;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 113;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 110;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 280:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  break;
               case 83:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 95;
                  else if (curChar == 98)
                     jjCheckNAdd(21);
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 90;
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 88;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 56;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 23:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 66;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 72:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 77;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 71;
                  if (curChar == 101)
                     jjCheckNAdd(73);
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 42;
                  else if (curChar == 110)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  else if (curChar == 102)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if (curChar == 105)
                     jjCheckNAdd(16);
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  if (curChar == 115)
                     jjAddStates(0, 7);
                  else if (curChar == 114)
                     jjAddStates(8, 12);
                  else if (curChar == 108)
                     jjAddStates(13, 17);
                  else if (curChar == 105)
                     jjCheckNAddStates(18, 27);
                  else if (curChar == 99)
                     jjAddStates(28, 37);
                  else if (curChar == 119)
                     jjAddStates(38, 41);
                  else if (curChar == 102)
                     jjAddStates(42, 45);
                  else if (curChar == 97)
                     jjAddStates(46, 50);
                  else if (curChar == 100)
                     jjAddStates(51, 53);
                  else if (curChar == 98)
                     jjAddStates(54, 55);
                  else if (curChar == 112)
                     jjAddStates(56, 57);
                  else if (curChar == 111)
                     jjCheckNAddStates(58, 61);
                  else if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 131:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if (curChar == 115)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 160;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 157;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 130;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 152;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(15);
                  }
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 0:
                  if (curChar == 100 && kind > 5)
                     kind = 5;
                  break;
               case 1:
                  if (curChar == 101)
                     jjCheckNAdd(0);
                  break;
               case 2:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 8:
                  if (curChar == 111)
                     jjCheckNAdd(0);
                  break;
               case 9:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(15);
                  break;
               case 16:
                  if (curChar == 108 && kind > 9)
                     kind = 9;
                  break;
               case 18:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 115 && kind > 9)
                     kind = 9;
                  break;
               case 22:
                  if (curChar == 101)
                     jjCheckNAdd(21);
                  break;
               case 24:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 114 && kind > 9)
                     kind = 9;
                  break;
               case 26:
                  if (curChar == 97)
                     jjCheckNAdd(25);
                  break;
               case 27:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
               case 38:
               case 146:
                  if (curChar == 111)
                     jjCheckNAdd(25);
                  break;
               case 29:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 111)
                     jjCheckNAddStates(58, 61);
                  break;
               case 31:
                  if (curChar == 116 && kind > 9)
                     kind = 9;
                  break;
               case 32:
                  if (curChar == 99)
                     jjCheckNAdd(31);
                  break;
               case 33:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 106)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 36:
                  if (curChar == 102 && kind > 9)
                     kind = 9;
                  break;
               case 37:
                  if (curChar == 110 && kind > 9)
                     kind = 9;
                  break;
               case 39:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 112)
                     jjAddStates(56, 57);
                  break;
               case 45:
                  if (curChar == 100 && kind > 9)
                     kind = 9;
                  break;
               case 46:
               case 186:
                  if (curChar == 101)
                     jjCheckNAdd(45);
                  break;
               case 47:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 50:
                  if (curChar == 101 && kind > 9)
                     kind = 9;
                  break;
               case 51:
                  if (curChar == 114)
                     jjCheckNAdd(50);
                  break;
               case 52:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 98)
                     jjAddStates(54, 55);
                  break;
               case 59:
                  if (curChar == 110 && kind > 5)
                     kind = 5;
                  break;
               case 60:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 65:
                  if (curChar == 101 && kind > 5)
                     kind = 5;
                  break;
               case 66:
                  if (curChar == 116)
                     jjCheckNAdd(65);
                  break;
               case 67:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 100)
                     jjAddStates(51, 53);
                  break;
               case 69:
               case 98:
               case 254:
                  if (curChar == 108)
                     jjCheckNAdd(65);
                  break;
               case 70:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 73:
                  if (curChar == 99 && kind > 9)
                     kind = 9;
                  break;
               case 74:
                  if (curChar == 101)
                     jjCheckNAdd(73);
                  break;
               case 75:
               case 84:
               case 115:
                  if (curChar == 116)
                     jjCheckNAdd(50);
                  break;
               case 76:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 97)
                     jjAddStates(46, 50);
                  break;
               case 80:
                  if (curChar == 121 && kind > 5)
                     kind = 5;
                  break;
               case 81:
                  if (curChar == 97)
                     jjCheckNAdd(80);
                  break;
               case 82:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 85:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 109 && kind > 9)
                     kind = 9;
                  break;
               case 91:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 98)
                     jjCheckNAdd(21);
                  break;
               case 93:
                  if (curChar == 97)
                     jjCheckNAdd(37);
                  break;
               case 94:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 102)
                     jjAddStates(42, 45);
                  break;
               case 100:
                  if (curChar == 108)
                     jjCheckNAdd(50);
                  break;
               case 101:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
               case 174:
                  if (curChar == 111)
                     jjCheckNAdd(37);
                  break;
               case 103:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 97)
                     jjCheckNAdd(73);
                  break;
               case 108:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 119)
                     jjAddStates(38, 41);
                  break;
               case 110:
               case 216:
               case 234:
                  if (curChar == 114)
                     jjCheckNAdd(0);
                  break;
               case 112:
                  if (curChar == 104 && kind > 9)
                     kind = 9;
                  break;
               case 113:
               case 225:
                  if (curChar == 116)
                     jjCheckNAdd(112);
                  break;
               case 114:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 116:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 108)
                     jjCheckNAdd(37);
                  break;
               case 119:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (curChar == 99)
                     jjAddStates(28, 37);
                  break;
               case 124:
                  if (curChar == 99)
                     jjCheckNAdd(80);
                  break;
               case 125:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 130:
                  if (curChar == 112 && kind > 5)
                     kind = 5;
                  break;
               case 132:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if (curChar == 114 && kind > 5)
                     kind = 5;
                  break;
               case 134:
                  if (curChar == 97)
                     jjCheckNAdd(133);
                  break;
               case 135:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if (curChar == 108 && kind > 5)
                     kind = 5;
                  break;
               case 137:
                  if (curChar == 97)
                     jjCheckNAdd(136);
                  break;
               case 138:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 144:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 147:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
               case 279:
                  if (curChar == 104)
                     jjCheckNAdd(25);
                  break;
               case 156:
                  if (curChar == 97)
                     jjCheckNAdd(31);
                  break;
               case 157:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if (curChar == 121 && kind > 9)
                     kind = 9;
                  break;
               case 161:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if (curChar == 111)
                     jjCheckNAdd(21);
                  break;
               case 164:
                  if (curChar == 105)
                     jjCheckNAddStates(18, 27);
                  break;
               case 165:
                  if (curChar == 101)
                     jjCheckNAdd(133);
                  break;
               case 166:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 172:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 175:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 182:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 183:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 184:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 185:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 187:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 188:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 189:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 190:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 191:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if (curChar == 110)
                     jjCheckNAdd(50);
                  break;
               case 194:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 195:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 196:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 197:
               case 242:
                  if (curChar == 99)
                     jjCheckNAdd(50);
                  break;
               case 198:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 200:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 201:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 202:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 203:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 202;
                  break;
               case 204:
                  if (curChar == 110)
                     jjCheckNAdd(73);
                  break;
               case 205:
                  if (curChar == 114)
                     jjCheckNAdd(31);
                  break;
               case 206:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 207:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 208:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 209:
                  if (curChar == 110)
                     jjCheckNAdd(31);
                  break;
               case 210:
                  if (curChar == 108)
                     jjAddStates(13, 17);
                  break;
               case 211:
                  if (curChar == 116 && kind > 5)
                     kind = 5;
                  break;
               case 212:
               case 263:
               case 269:
                  if (curChar == 110)
                     jjCheckNAdd(211);
                  break;
               case 213:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 214:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 215:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 217:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 218:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 219:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 220:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               case 221:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 220;
                  break;
               case 222:
                  if (curChar == 101)
                     jjCheckNAdd(16);
                  break;
               case 223:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 222;
                  break;
               case 224:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 223;
                  break;
               case 226:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 225;
                  break;
               case 227:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 228:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 227;
                  break;
               case 229:
                  if (curChar == 103 && kind > 9)
                     kind = 9;
                  break;
               case 230:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 229;
                  break;
               case 231:
                  if (curChar == 114)
                     jjAddStates(8, 12);
                  break;
               case 235:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 234;
                  break;
               case 236:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 235;
                  break;
               case 237:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 236;
                  break;
               case 238:
                  if (curChar == 114)
                     jjCheckNAdd(45);
                  break;
               case 239:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 238;
                  break;
               case 240:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 239;
                  break;
               case 241:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 240;
                  break;
               case 243:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 242;
                  break;
               case 244:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 243;
                  break;
               case 245:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 244;
                  break;
               case 246:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 245;
                  break;
               case 247:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 246;
                  break;
               case 248:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 247;
                  break;
               case 249:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 248;
                  break;
               case 250:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 249;
                  break;
               case 251:
                  if (curChar == 97)
                     jjCheckNAdd(45);
                  break;
               case 252:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 251;
                  break;
               case 253:
                  if (curChar == 115)
                     jjAddStates(0, 7);
                  break;
               case 255:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 254;
                  break;
               case 256:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 255;
                  break;
               case 257:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 256;
                  break;
               case 258:
                  if (curChar == 103 && kind > 5)
                     kind = 5;
                  break;
               case 259:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 258;
                  break;
               case 260:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 259;
                  break;
               case 261:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 260;
                  break;
               case 262:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 264:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 263;
                  break;
               case 265:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 264;
                  break;
               case 266:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 265;
                  break;
               case 267:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 266;
                  break;
               case 268:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 267;
                  break;
               case 270:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 269;
                  break;
               case 271:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 270;
                  break;
               case 272:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 271;
                  break;
               case 273:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 272;
                  break;
               case 274:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 273;
                  break;
               case 275:
                  if (curChar == 108)
                     jjCheckNAdd(36);
                  break;
               case 276:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 275;
                  break;
               case 277:
                  if (curChar == 101)
                     jjCheckNAdd(31);
                  break;
               case 278:
                  if (curChar == 104)
                     jjCheckNAdd(16);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 280 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   257, 262, 268, 274, 276, 277, 278, 279, 233, 237, 241, 250, 252, 215, 221, 224, 
   228, 230, 169, 173, 185, 37, 192, 196, 203, 204, 208, 209, 129, 132, 135, 142, 
   145, 154, 155, 159, 162, 163, 111, 114, 117, 122, 99, 101, 106, 108, 83, 89, 
   91, 92, 96, 72, 74, 78, 64, 67, 49, 57, 35, 36, 37, 43, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, "\75\40", "\74", 
"\76", "\74\75\40", "\76\75\40", "\57\40", "\53\40", "\55\40", "\52\40", 
"\144\151\166\40", "\155\157\144\40", "\72\75\40", "\53\75\40", "\55\75\40", "\52\75\40", 
"\50\52\40", "\52\51\40", "\50\56\40", "\56\51\40", "\57\57\40", 
"\160\165\142\154\151\143\40\163\164\141\164\151\143\40\166\157\151\144\40\115\141\151\156\50\51\40", "\120\162\157\147\162\141\155\141\40", "\151\146\40", "\164\150\145\156\40", 
"\145\154\163\145\40", "\167\150\151\154\145\40", "\144\157\40", "\146\157\162\40", 
"\162\145\160\145\141\164\40", "\165\156\164\151\154\40", "\147\157\164\157\40", "\141\156\144\40", 
"\142\145\147\151\156\40", "\142\162\145\141\153\40", "\143\157\156\164\151\156\165\145\40", 
"\144\157\167\156\164\157\40", "\145\156\144\40", "\145\156\144\56\40", "\156\157\164\40", "\157\162\40", 
"\164\162\165\145\40", "\146\141\154\163\145\40", "\50", "\51", "\173", "\175", "\133", "\135", 
"\56", "\72", "\100", "\44", "\43", "\136", "\54", "\42", "\47", "\73", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xfL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[280];
private final int[] jjstateSet = new int[560];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public AnalisadorTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public AnalisadorTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 280; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000400L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 5 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                                                                                                                                                       System.out.println("TIPOS -> "+image);
         break;
      case 6 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                     System.out.print("NUMEROS "+image+"\u005cr\u005cn");
         break;
      case 7 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                               System.out.print("IDENTIFICADOR -> "+image+"\u005cr\u005cn");
         break;
      case 8 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                           System.out.print("STRING -> "+image+"\u005cr\u005cn");
         break;
      case 9 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                                                                                                                                                                                                                                                                                                                                                           System.out.print("PALAVRAS_RESERVADAS -> "+image+"\u005cr\u005cn");
         break;
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
                               System.out.println("IGUALDADE  ->"+image+"\u005cr\u005cn");
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
                          System.out.println("MENORQUE ->"+image+"\u005cr\u005cn");
         break;
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
                         System.out.println("MAIORQUE ->"+image+"\u005cr\u005cn");
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
                             System.out.println("MENORIGUAL ->"+image+"\u005cr\u005cn");
         break;
      case 14 :
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
                             System.out.println("MAIORIGUAL ->"+image+"\u005cr\u005cn");
         break;
      case 15 :
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
                         System.out.println("DIVISAO -> "+image+"\u005cr\u005cn");
         break;
      case 16 :
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
                      System.out.println("SOMA -> "+image+"\u005cr\u005cn");
         break;
      case 17 :
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
                           System.out.println("SUBTRACAO -> "+image+"\u005cr\u005cn");
         break;
      case 18 :
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
                               System.out.println("MUTIPLICACAO -> "+image+"\u005cr\u005cn");
         break;
      case 19 :
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
                                   System.out.println("DIVISAO_INTEIRA -> "+image+"\u005cr\u005cn");
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
                         System.out.println("RESTO -> "+image+"\u005cr\u005cn");
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
                              System.out.println("DPONTOIGUAL ->  "+image+"\u005cr\u005cn");
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
                            System.out.println("MAISIGUAL -> "+image+"\u005cr\u005cn");
         break;
      case 23 :
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
                             System.out.println("MENOSIGUAL -> "+image+"\u005cr\u005cn");
         break;
      case 24 :
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
                             System.out.println("MULTIIGUAL -> "+image+"\u005cr\u005cn");
         break;
      case 25 :
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
                              System.out.println("PARENTMULTI -> "+image+"\u005cr\u005cn");
         break;
      case 26 :
        image.append(jjstrLiteralImages[26]);
        lengthOfMatch = jjstrLiteralImages[26].length();
                              System.out.println("MULTIPARENT -> "+image+"\u005cr\u005cn");
         break;
      case 27 :
        image.append(jjstrLiteralImages[27]);
        lengthOfMatch = jjstrLiteralImages[27].length();
                              System.out.println("PARENTPONTO -> "+image+"\u005cr\u005cn");
         break;
      case 28 :
        image.append(jjstrLiteralImages[28]);
        lengthOfMatch = jjstrLiteralImages[28].length();
                              System.out.println("PONTOPARENT -> "+image+"\u005cr\u005cn");
         break;
      case 29 :
        image.append(jjstrLiteralImages[29]);
        lengthOfMatch = jjstrLiteralImages[29].length();
                             System.out.println("BARRABARRA -> "+image+"\u005cr\u005cn");
         break;
      case 30 :
        image.append(jjstrLiteralImages[30]);
        lengthOfMatch = jjstrLiteralImages[30].length();
                                               System.out.println("MAIN -> "+image);
         break;
      case 31 :
        image.append(jjstrLiteralImages[31]);
        lengthOfMatch = jjstrLiteralImages[31].length();
                                    System.out.println("PROGRAMA -> "+image);
         break;
      case 32 :
        image.append(jjstrLiteralImages[32]);
        lengthOfMatch = jjstrLiteralImages[32].length();
                       System.out.println("IF -> "+image);
         break;
      case 33 :
        image.append(jjstrLiteralImages[33]);
        lengthOfMatch = jjstrLiteralImages[33].length();
                       System.out.println("THEN -> "+image);
         break;
      case 34 :
        image.append(jjstrLiteralImages[34]);
        lengthOfMatch = jjstrLiteralImages[34].length();
                       System.out.println("ELSE -> "+image);
         break;
      case 35 :
        image.append(jjstrLiteralImages[35]);
        lengthOfMatch = jjstrLiteralImages[35].length();
                         System.out.println("WHILE -> "+image);
         break;
      case 36 :
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
                   System.out.println("DO -> "+image);
         break;
      case 37 :
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
                     System.out.println("FOR -> "+image);
         break;
      case 38 :
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
                           System.out.println("REPEAT -> "+image);
         break;
      case 39 :
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
                         System.out.println("UNTIL -> "+image);
         break;
      case 40 :
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
                       System.out.println("GOTO -> "+image);
         break;
      case 41 :
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
                     System.out.println("AND -> "+image);
         break;
      case 42 :
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
                         System.out.println("BEGIN -> "+image);
         break;
      case 43 :
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
                         System.out.println("BREAK -> "+image);
         break;
      case 44 :
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
                               System.out.println("CONTINUE -> "+image);
         break;
      case 45 :
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
                           System.out.println("DOWNTO -> "+image);
         break;
      case 46 :
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
                     System.out.println("END -> "+image);
         break;
      case 47 :
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
                           System.out.println("ENDPONTO -> "+image);
         break;
      case 48 :
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
                     System.out.println("NOT -> "+image);
         break;
      case 49 :
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
                   System.out.println("OR -> "+image);
         break;
      case 50 :
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
                       System.out.println("TRUE -> "+image);
         break;
      case 51 :
        image.append(jjstrLiteralImages[51]);
        lengthOfMatch = jjstrLiteralImages[51].length();
                         System.out.println("FALSE -> "+image);
         break;
      case 52 :
        image.append(jjstrLiteralImages[52]);
        lengthOfMatch = jjstrLiteralImages[52].length();
                     System.out.println("EPAREN -> "+image);
         break;
      case 53 :
        image.append(jjstrLiteralImages[53]);
        lengthOfMatch = jjstrLiteralImages[53].length();
                         System.out.println("DPAREN -> "+image);
         break;
      case 54 :
        image.append(jjstrLiteralImages[54]);
        lengthOfMatch = jjstrLiteralImages[54].length();
                         System.out.println("ECHAVE -> "+image);
         break;
      case 55 :
        image.append(jjstrLiteralImages[55]);
        lengthOfMatch = jjstrLiteralImages[55].length();
                         System.out.println("DCHAVE -> "+image);
         break;
      case 56 :
        image.append(jjstrLiteralImages[56]);
        lengthOfMatch = jjstrLiteralImages[56].length();
                        System.out.println("EBRACKETS -> "+image);
         break;
      case 57 :
        image.append(jjstrLiteralImages[57]);
        lengthOfMatch = jjstrLiteralImages[57].length();
                        System.out.println("DBRACKETS -> "+image);
         break;
      case 58 :
        image.append(jjstrLiteralImages[58]);
        lengthOfMatch = jjstrLiteralImages[58].length();
                    System.out.println("PONTO -> "+image);
         break;
      case 59 :
        image.append(jjstrLiteralImages[59]);
        lengthOfMatch = jjstrLiteralImages[59].length();
                      System.out.println("DPONTOS -> "+image);
         break;
      case 60 :
        image.append(jjstrLiteralImages[60]);
        lengthOfMatch = jjstrLiteralImages[60].length();
                    System.out.println("AROBA -> "+image);
         break;
      case 61 :
        image.append(jjstrLiteralImages[61]);
        lengthOfMatch = jjstrLiteralImages[61].length();
                     System.out.println("CIFRAO -> "+image);
         break;
      case 62 :
        image.append(jjstrLiteralImages[62]);
        lengthOfMatch = jjstrLiteralImages[62].length();
                      System.out.println("HASHTAG -> "+image);
         break;
      case 63 :
        image.append(jjstrLiteralImages[63]);
        lengthOfMatch = jjstrLiteralImages[63].length();
                     System.out.println("ACENTO -> "+image);
         break;
      case 64 :
        image.append(jjstrLiteralImages[64]);
        lengthOfMatch = jjstrLiteralImages[64].length();
                      System.out.println("VIRGULA -> "+image);
         break;
      case 65 :
        image.append(jjstrLiteralImages[65]);
        lengthOfMatch = jjstrLiteralImages[65].length();
                          System.out.println("ASPASNORMAL -> "+image);
         break;
      case 66 :
        image.append(jjstrLiteralImages[66]);
        lengthOfMatch = jjstrLiteralImages[66].length();
                    System.out.println("ASPAS -> "+image);
         break;
      case 67 :
        image.append(jjstrLiteralImages[67]);
        lengthOfMatch = jjstrLiteralImages[67].length();
                                System.out.println("PONTO E VIRGULA -> "+image);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
